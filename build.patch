--- libgda-5.2.10/libgda/gda-connection.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda/gda-connection.c	2025-07-19 22:23:01.055909286 +0200
@@ -6458,7 +6458,7 @@ gda_connection_add_prepared_statement (G
 
 	if (!cnc->priv->prepared_stmts)
 		cnc->priv->prepared_stmts = g_hash_table_new_full (g_direct_hash, g_direct_equal,
-								   NULL, _gda_prepared_estatement_free);
+								   NULL, (GDestroyNotify)_gda_prepared_estatement_free);
 	g_hash_table_remove (cnc->priv->prepared_stmts, gda_stmt);
 	PreparedStatementRef *ref = _gda_prepared_estatement_new (gda_stmt, prepared_stmt);
 	g_hash_table_insert (cnc->priv->prepared_stmts, gda_stmt, ref);
--- libgda-5.2.10/libgda-xslt/sql_backend.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda-xslt/sql_backend.c	2025-07-19 22:45:11.527776318 +0200
@@ -152,7 +152,7 @@ _gda_xslt_bk_section (GdaXsltExCont * ex
 					if (info != NULL) {
 						xsltCallTemplate
 							(ctxt, node,
-							 cur_node, info);
+							 cur_node, (xsltElemPreCompPtr)info);
 					}
 					else {
 						printf ("the xsltStylePreCompPtr is empthy\n");
--- libgda-5.2.10/libgda-ui/data-entries/gdaui-entry-bin.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda-ui/data-entries/gdaui-entry-bin.c	2025-07-19 22:48:05.858896256 +0200
@@ -239,11 +239,11 @@
 
 	label = gtk_label_new ("");
 	gtk_box_pack_start (GTK_BOX (hbox), label, FALSE, FALSE, 0);
-	dbin->priv->button_label = g_object_ref (G_OBJECT (label));
+	dbin->priv->button_label = (GtkWidget *)g_object_ref (G_OBJECT (label));
 
 	img = gtk_image_new_from_pixbuf (attach_pixbuf);
 	gtk_box_pack_start (GTK_BOX (hbox), img, FALSE, FALSE, 0);
-	dbin->priv->button_image = g_object_ref (G_OBJECT (img));
+	dbin->priv->button_image = (GtkWidget *)g_object_ref (G_OBJECT (img));
 
         arrow = gtk_arrow_new (GTK_ARROW_DOWN, GTK_SHADOW_NONE);
 	gtk_misc_set_alignment (GTK_MISC (arrow), 1.0, -1);
--- libgda-5.2.10/libgda-ui/gdaui-raw-grid.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda-ui/gdaui-raw-grid.c	2025-07-19 22:55:18.908344177 +0200
@@ -2915,7 +2915,7 @@ paramlist_param_attr_changed_cb (G_GNUC_
 		GtkCellRenderer *renderer;
 		gint model_col;
 		renderer = _gdaui_new_cell_renderer (gda_holder_get_g_type (param), plugin);
-		cdata->data_cell = g_object_ref_sink ((GObject*) renderer);
+		cdata->data_cell = (GtkCellRenderer *)g_object_ref_sink ((GObject*) renderer);
 		g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 
 		model_col = g_slist_index (((GdaSet *)grid->priv->iter)->holders, param);
--- libgda-5.2.10/libgda-ui/gdaui-raw-grid.c~	2025-07-19 22:55:18.000000000 +0200
+++ libgda-5.2.10/libgda-ui/gdaui-raw-grid.c	2025-07-19 22:57:53.676004196 +0200
@@ -787,7 +787,7 @@ create_columns_data (GdauiRawGrid *grid)
 			/* FIXME: if nullok is FALSE, then set the column title in bold */
 			cdata->tooltip_text = g_strdup (_("Can't be NULL"));
 			renderer = gdaui_data_cell_renderer_combo_new (grid->priv->iter_info, gdaui_set_group_get_source (group));
-			cdata->data_cell = g_object_ref_sink ((GObject*) renderer);
+			cdata->data_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
 			g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 			g_free (cdata->title);
 			cdata->title = title;
@@ -827,7 +827,7 @@ create_columns_data (GdauiRawGrid *grid)
 						   GDAUI_ATTRIBUTE_PLUGIN);
 			}
 			renderer = _gdaui_new_cell_renderer (g_type, plugin);
-			cdata->data_cell = g_object_ref_sink ((GObject*) renderer);
+			cdata->data_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
 			g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 			g_free (cdata->title);
 			cdata->title = title;
@@ -849,7 +849,7 @@ create_columns_data (GdauiRawGrid *grid)
 
 		/* Adding the GValue's information cell as another GtkCellRenderer */
 		renderer = gdaui_data_cell_renderer_info_new (grid->priv->store, grid->priv->iter, group);
-		cdata->info_cell = g_object_ref_sink ((GObject*) renderer);
+		cdata->info_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
 		g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 		g_signal_connect (G_OBJECT (renderer), "status-changed",
 				  G_CALLBACK (data_cell_status_changed), grid);
--- libgda-5.2.10/libgda-ui/gdaui-raw-grid.c~	2025-08-11 23:36:13.000000000 +0200
+++ libgda-5.2.10/libgda-ui/gdaui-raw-grid.c	2025-08-11 23:46:09.060690023 +0200
@@ -787,7 +787,7 @@ create_columns_data (GdauiRawGrid *grid)
 			/* FIXME: if nullok is FALSE, then set the column title in bold */
 			cdata->tooltip_text = g_strdup (_("Can't be NULL"));
 			renderer = gdaui_data_cell_renderer_combo_new (grid->priv->iter_info, gdaui_set_group_get_source (group));
-			cdata->data_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
+			cdata->data_cell = (GtkCellRenderer *)g_object_ref_sink ((GObject*) renderer);
 			g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 			g_free (cdata->title);
 			cdata->title = title;
@@ -827,7 +827,7 @@ create_columns_data (GdauiRawGrid *grid)
 						   GDAUI_ATTRIBUTE_PLUGIN);
 			}
 			renderer = _gdaui_new_cell_renderer (g_type, plugin);
-			cdata->data_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
+			cdata->data_cell = (GtkCellRenderer *)g_object_ref_sink ((GObject*) renderer);
 			g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 			g_free (cdata->title);
 			cdata->title = title;
--- libgda-5.2.10/libgda-ui/gdaui-raw-grid.c~	2025-08-11 23:46:09.000000000 +0200
+++ libgda-5.2.10/libgda-ui/gdaui-raw-grid.c	2025-08-11 23:51:58.712755212 +0200
@@ -517,7 +517,7 @@ gdaui_raw_grid_set_property (GObject *ob
 			if (!grid->priv->proxy) {
 				/* first time setting */
 				if (GDA_IS_DATA_PROXY (model))
-					grid->priv->proxy = g_object_ref (G_OBJECT (model));
+					grid->priv->proxy = GDA_DATA_PROXY (g_object_ref (G_OBJECT (model)));
 				else
 					grid->priv->proxy = GDA_DATA_PROXY (gda_data_proxy_new (model));
 
@@ -849,7 +849,7 @@ create_columns_data (GdauiRawGrid *grid)
 
 		/* Adding the GValue's information cell as another GtkCellRenderer */
 		renderer = gdaui_data_cell_renderer_info_new (grid->priv->store, grid->priv->iter, group);
-		cdata->info_cell = (GdaDataProxy *)g_object_ref_sink ((GObject*) renderer);
+		cdata->info_cell = (GtkCellRenderer *)g_object_ref_sink ((GObject*) renderer);
 		g_hash_table_insert (grid->priv->columns_hash, renderer, cdata);
 		g_signal_connect (G_OBJECT (renderer), "status-changed",
 				  G_CALLBACK (data_cell_status_changed), grid);
--- libgda-5.2.10/libgda-ui/gdaui-raw-form.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda-ui/gdaui-raw-form.c	2025-08-12 00:01:21.659413542 +0200
@@ -383,7 +383,7 @@ gdaui_raw_form_set_property (GObject *ob
 			if (!form->priv->proxy) {
 				/* first time setting */
 				if (GDA_IS_DATA_PROXY (model))
-					form->priv->proxy = g_object_ref (G_OBJECT (model));
+					form->priv->proxy = GDA_DATA_PROXY(g_object_ref (G_OBJECT (model)));
 				else
 					form->priv->proxy = GDA_DATA_PROXY (gda_data_proxy_new (model));
 				form->priv->data_model = gda_data_proxy_get_proxied_model (form->priv->proxy);
--- libgda-5.2.10/libgda-ui/data-entries/plugins/libmain.c~	2020-11-08 21:23:19.000000000 +0100
+++ libgda-5.2.10/libgda-ui/data-entries/plugins/libmain.c	2025-08-12 00:05:29.727557013 +0200
@@ -48,6 +48,7 @@
   #include <gtksourceview/gtksourcebuffer.h>
   #include <gtksourceview/gtksourcestyleschememanager.h>
   #include <gtksourceview/gtksourcestylescheme.h>
+  #include <gtksourceview/gtksource.h>
 #endif
 
 static GdauiDataEntry *plugin_entry_filesel_create_func (GdaDataHandler *handler, GType type, const gchar *options);
